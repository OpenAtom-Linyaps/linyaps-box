cmake_minimum_required(VERSION 3.11.4) # for RHEL 8

# Let's place extra cmake scripts in /cmake directory
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

project(
  linyaps-box
  VERSION 1.3.4
  DESCRIPTION "A simple OCI runtime for desktop applications."
  HOMEPAGE_URL "https://github.com/OpenAtom-Linyaps/linyaps-box"
  LANGUAGES CXX)

# ==============================================================================

option(linyaps-box_STATIC "Build statically-linked binary." OFF)

set(linyaps-box_ENABLE_SECCOMP_DEFAULT ON)
if(linyaps-box_STATIC)
  set(linyaps-box_ENABLE_SECCOMP_DEFAULT OFF)
endif()

option(linyaps-box_ENABLE_SECCOMP "Enable seccomp support."
       ${linyaps-box_ENABLE_SECCOMP_DEFAULT})

if(linyaps-box_STATIC AND linyaps-box_ENABLE_SECCOMP)
  message(FATAL_ERROR "Seccomp support is not available in static build.")
endif()

if(CMAKE_VERSION VERSION_LESS 3.21)
  # https://www.scivision.dev/cmake-project-is-top-level/
  get_property(
    not_top
    DIRECTORY
    PROPERTY PARENT_DIRECTORY)
  if(NOT not_top)
    set(PROJECT_IS_TOP_LEVEL true)
  else()
    set(PROJECT_IS_TOP_LEVEL false)
  endif()
endif()

option(linyaps-box_ENABLE_TESTING "Enable testing." ${PROJECT_IS_TOP_LEVEL})
option(linyaps-box_ENABLE_SMOKE_TESTS "Enable smoke testing." OFF)

if((NOT linyaps-box_ENABLE_TESTING) AND linyaps-box_ENABLE_SMOKE_TESTS)
  message(
    WARNING "Smoke tests require testing to be enabled. Enabling testing.")
endif()

option(linyaps-box_ENABLE_COVERAGE "Enable coverage." OFF)

option(linyaps-box_ENABLE_CPACK "Enable CPack." OFF)
set(linyaps-box_CPACK_PACKAGING_INSTALL_PREFIX
    "/opt/org.openatom.linyaps-box"
    CACHE STRING "Install prefix for package generated by CPack.")

# ==============================================================================

set(linyaps-box_LIBRARY linyaps-box)
set(linyaps-box_LIBRARY_SOURCE
    ./src/container/container.cpp
    ./src/container/container.h
    ./src/container/helper.cpp
    ./src/container/helper.h
    ./src/container/mount
    ./src/container/mount/filesystem_driver.cpp
    ./src/container/mount/filesystem_driver.h
    ./src/container/mount/host_mount.cpp
    ./src/container/mount/host_mount.h
    ./src/container/seccomp.cpp
    ./src/container/seccomp.h
    ./src/util/common.cpp
    ./src/util/common.h
    ./src/util/debug
    ./src/util/debug/debug.cpp
    ./src/util/debug/debug.h
    ./src/util/filesystem.cpp
    ./src/util/filesystem.h
    ./src/util/json.h
    ./src/util/logger.cpp
    ./src/util/logger.h
    ./src/util/macro.h
    ./src/util/message_reader.cpp
    ./src/util/message_reader.h
    ./src/util/oci_runtime.h
    ./src/util/platform.cpp
    ./src/util/platform.h
    ./src/util/semaphore.cpp
    ./src/util/semaphore.h
    ./src/util/util.h)
set(linyaps-box_LIBRARY_LINK_LIBRARIES)
set(linyaps-box_LIBRARY_INCLUDE_DIRS PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/src")

if(linyaps-box_ENABLE_SECCOMP)
  find_package(PkgConfig)
  pkg_check_modules(libseccomp REQUIRED IMPORTED_TARGET libseccomp)
  list(APPEND linyaps-box_LIBRARY_LINK_LIBRARIES PUBLIC PkgConfig::libseccomp)
endif()

find_package(nlohmann_json 3.5.0 REQUIRED)
list(APPEND linyaps-box_LIBRARY_LINK_LIBRARIES PUBLIC
     nlohmann_json::nlohmann_json)

add_library("${linyaps-box_LIBRARY}" ${linyaps-box_LIBRARY_SOURCE})
target_include_directories("${linyaps-box_LIBRARY}"
                           ${linyaps-box_LIBRARY_INCLUDE_DIRS})
target_link_libraries("${linyaps-box_LIBRARY}"
                      ${linyaps-box_LIBRARY_LINK_LIBRARIES})
target_compile_features("${linyaps-box_LIBRARY}" PUBLIC cxx_std_17)
if(linyaps-box_ENABLE_SECCOMP)
  target_compile_definitions("${linyaps-box_LIBRARY}"
                             PUBLIC LINYAPS_BOX_ENABLE_SECCOMP)
endif()

if(linyaps-box_ENABLE_COVERAGE)
  if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_compile_options("${linyaps-box_LIBRARY}"
                           PRIVATE -fprofile-instr-generate -fcoverage-mapping)
    target_link_options("${linyaps-box_LIBRARY}" PUBLIC
                        -fprofile-instr-generate -fcoverage-mapping)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options("${linyaps-box_LIBRARY}" PRIVATE --coverage)
    target_link_options("${linyaps-box_LIBRARY}" PUBLIC --coverage)
  else()
    message(
      FATAL_ERROR "Coverage is not supported for ${CMAKE_CXX_COMPILER_ID}.")
  endif()
endif()
set_property(TARGET "${linyaps-box_LIBRARY}" PROPERTY CXX_STANDARD 17)
set_property(TARGET "${linyaps-box_LIBRARY}" PROPERTY CXX_STANDARD_REQUIRED ON)

# ==============================================================================

set(linyaps-box_APP ll-box)
set(linyaps-box_APP_SOURCE "./app/${linyaps-box_APP}/src/main.cpp")
set(linyaps-box_APP_LINK_LIBRARIES PRIVATE "${linyaps-box_LIBRARY}")
set(linyaps-box_APP_SOURCE_INCLUDE_DIRS
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/app/${linyaps-box_APP}/src")

add_executable("${linyaps-box_APP}" ${linyaps-box_APP_SOURCE})
target_include_directories("${linyaps-box_APP}"
                           ${linyaps-box_APP_SOURCE_INCLUDE_DIRS})
target_link_libraries("${linyaps-box_APP}" ${linyaps-box_APP_LINK_LIBRARIES})
if(linyaps-box_STATIC)
  target_link_options("${linyaps-box_APP}" PRIVATE -static)
endif()
target_compile_features("${linyaps-box_APP}" PRIVATE cxx_std_17)
set_property(TARGET "${linyaps-box_APP}" PROPERTY CXX_STANDARD 17)
set_property(TARGET "${linyaps-box_APP}" PROPERTY CXX_STANDARD_REQUIRED ON)

# ==============================================================================

include(GNUInstallDirs)
install(PROGRAMS "${CMAKE_CURRENT_BINARY_DIR}/${linyaps-box_APP}" TYPE BIN)

if(linyaps-box_ENABLE_CPACK)
  set(CPACK_PACKAGING_INSTALL_PREFIX
      "${linyaps-box_CPACK_PACKAGING_INSTALL_PREFIX}")
  set(CPACK_PACKAGE_CONTACT "chenlinxuan@uniontech.com")
  set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
  set(CPACK_RPM_PACKAGE_AUTOREQ ON)
  include(CPack)
endif()

# ==============================================================================

if(NOT linyaps-box_ENABLE_TESTING)
  return()
endif()

enable_testing()

set(linyaps-box_UNIT_TESTS ll-box-ut)
set(linyaps-box_UNIT_TESTS_SOURCE ./tests/ll-box-ut/src/oci_test.cpp
                                  ./tests/ll-box-ut/src/seccomp_test.cpp)
set(linyaps-box_UNIT_TESTS_LINK_LIBRARIES PRIVATE "${linyaps-box_LIBRARY}")
set(linyaps-box_UNIT_TESTS_SOURCE_INCLUDE_DIRS
    PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/tests/ll-box-ut/src")

find_package(GTest REQUIRED)

if(CMAKE_VERSION VERSION_LESS 3.21)
  add_library(GTest::gtest_main ALIAS GTest::Main)
endif()

list(APPEND linyaps-box_UNIT_TESTS_LINK_LIBRARIES PRIVATE GTest::gtest_main)

add_executable("${linyaps-box_UNIT_TESTS}" ${linyaps-box_UNIT_TESTS_SOURCE})
target_include_directories("${linyaps-box_UNIT_TESTS}"
                           ${linyaps-box_UNIT_TESTS_SOURCE_INCLUDE_DIRS})
target_link_libraries("${linyaps-box_UNIT_TESTS}"
                      ${linyaps-box_UNIT_TESTS_LINK_LIBRARIES})
target_compile_features("${linyaps-box_UNIT_TESTS}" PRIVATE cxx_std_17)
set_property(TARGET "${linyaps-box_UNIT_TESTS}" PROPERTY CXX_STANDARD 17)
set_property(TARGET "${linyaps-box_UNIT_TESTS}" PROPERTY CXX_STANDARD_REQUIRED
                                                         ON)

include(GoogleTest)

set(GTEST_DISCOVER_TESTS_ARGS "${linyaps-box_UNIT_TESTS}" WORKING_DIRECTORY
                              "${CMAKE_CURRENT_SOURCE_DIR}/tests/ll-box-ut")

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  list(APPEND GTEST_DISCOVER_TESTS_ARGS PROPERTIES ENVIRONMENT
       "LLVM_PROFILE_FILE=${CMAKE_CURRENT_BINARY_DIR}/default.profraw")
endif()

gtest_discover_tests(${GTEST_DISCOVER_TESTS_ARGS})

function(setup_linyaps_box_smoke_tests)
  if(NOT linyaps-box_ENABLE_SMOKE_TESTS)
    return()
  endif()

  set(linyaps-box_SMOKE_TESTS
      ./tests/ll-box-st/01-run-whoami-with-debian-latest.json)

  foreach(test ${linyaps-box_SMOKE_TESTS})
    add_test(
      NAME "${test}"
      COMMAND
        "${CMAKE_CURRENT_SOURCE_DIR}/tests/ll-box-st/ll-box-st"
        "${CMAKE_CURRENT_BINARY_DIR}/${linyaps-box_APP}"
        "${CMAKE_CURRENT_BINARY_DIR}/st-data" "${test}")
    list(APPEND linyaps-box_TESTS "${test}")
  endforeach()
endfunction()

setup_linyaps_box_smoke_tests()

function(setup_linyaps_box_coverage)
  if(NOT linyaps-box_ENABLE_COVERAGE)
    return()
  endif()

  set(COVERAGE_INFO "coverage.info")

  if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set_tests_properties(
      ${linyaps-box_TESTS}
      PROPERTIES ENVIRONMENT
                 "LLVM_PROFILE_FILE=${CMAKE_CURRENT_BINARY_DIR}/default.profraw"
    )

    find_program(LLVM_PROFDATA llvm-profdata REQUIRED)
    find_program(LLVM_COV llvm-cov REQUIRED)
    add_custom_command(
      OUTPUT coverage.info
      DEPENDS "${linyaps-box_LIBRARY}"
      COMMAND "${LLVM_PROFDATA}" merge -sparse default.profraw -o
              default.profdata
      COMMAND
        "${LLVM_COV}" show -instr-profile
        "${CMAKE_CURRENT_BINARY_DIR}/default.profdata"
        $<TARGET_FILE_NAME:${linyaps-box_LIBRARY}> > "${COVERAGE_INFO}")
    add_custom_target(coverage DEPENDS coverage.info)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    find_program(LCOV lcov REQUIRED)
    find_program(SED sed REQUIRED)
    add_custom_target(
      coverage
      COMMAND "${LCOV}" --capture --directory . --output-file coverage.info
              --branch-coverage --rc geninfo_unexecuted_blocks=1
      COMMAND "${LCOV}" --remove coverage.info '/usr/*' --output-file
              coverage.info
      WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
      DEPENDS "${linyaps-box_LIBRARY}" test)
  else()
    message(
      FATAL_ERROR "Coverage is not supported for ${CMAKE_CXX_COMPILER_ID}.")
  endif()
endfunction()

setup_linyaps_box_coverage()
